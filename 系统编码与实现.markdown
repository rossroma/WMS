# **第四章 系统编码与实现**

本章在前两章需求分析和系统设计的基础上，详细介绍基于Node.js的仓储管理系统的具体编码实现过程。内容包括开发环境的搭建、技术选型、以及核心功能模块（如用户认证、商品管理、出入库管理、库存管理和数据看板）的实现细节。

#### **4.1 开发环境与技术选型**

为保证系统开发的顺利进行，搭建了统一的开发环境并确定了具体的技术组件版本。

- **操作系统**：Windows 10/11, macOS, or Linux
- 前端技术栈：
  - Node.js: v16.x (用于Vite构建工具和开发服务器)
  - Vite: v4.x (前端构建工具)
  - Vue.js: v3.x (核心前端框架)
  - Vue Router: v4.x (前端路由管理)
  - Pinia: v2.x (状态管理)
  - Element Plus: v2.x (UI组件库)
  - Axios: v1.x (HTTP客户端)
  - ECharts: v5.x (数据可视化图表库)
- 后端技术栈：
  - Node.js: v16.x or v18.x (服务器运行环境)
  - Express.js: v4.x (Web应用框架)
  - Sequelize: v6.x (ORM，用于操作MySQL)
  - mysql2: v3.x (MySQL驱动)
  - JSON Web Token (jsonwebtoken): v9.x (JWT认证)
  - bcryptjs: v2.x (密码加密)
  - Winston: v3.x (日志管理)
  - Multer: v1.x (文件上传处理，如商品图片)
  - Node-cron: v3.x (定时任务)
- **数据库**：MySQL Server 8.0
- **开发工具**：Visual Studio Code (VS Code)
- **版本控制**：Git
- **容器化**：Docker, Docker Compose (用于部署)

**表 4.1 关键开发环境包及版本（示例）** 

| 类型       | 名称         | 版本    | 描述                      |
| ---------- | ------------ | ------- | ------------------------- |
| 前端框架   | Vue.js       | 3.2.47  | JavaScript MVVM框架       |
| UI库       | Element Plus | 2.3.4   | Vue 3.0 UI 组件库         |
| HTTP客户端 | Axios        | 1.4.0   | Promise based HTTP client |
| 后端环境   | Node.js      | 18.16.0 | JavaScript 运行环境       |
| Web框架    | Express.js   | 4.18.2  | Node.js Web 应用框架      |
| ORM        | Sequelize    | 6.31.1  | Node.js ORM for SQL DBs   |
| 数据库     | MySQL        | 8.0.33  | 关系型数据库管理系统      |
| 认证       | jsonwebtoken | 9.0.0   | JWT 实现库                |

Export to Sheets

#### **4.2 用户认证与权限管理实现**

##### **4.2.1 功能介绍**

用户认证与权限管理是仓储管理系统的安全基石，主要提供以下功能：
- 用户注册与登录：支持新用户注册和已有用户登录验证
- 密码安全管理：采用bcrypt加密算法确保密码安全存储
- JWT令牌认证：基于JSON Web Token实现无状态身份验证
- 角色权限控制：支持管理员、仓库管理员、普通员工等不同角色
- 会话管理：自动处理登录状态保持和超时退出

##### **4.2.2 网页截图说明**

**登录页面界面说明：**
- 页面顶部：系统Logo和名称"仓储管理系统"
- 登录表单区域：包含用户名输入框、密码输入框（带眼睛图标显示/隐藏密码）
- 操作按钮：蓝色"登录"主按钮，灰色"注册"次要按钮
- 页面底部：版权信息和技术支持信息
- 背景：简洁的渐变色背景，营造专业感

**用户管理页面界面说明：**
- 顶部导航栏：显示当前用户信息和退出按钮
- 左侧菜单栏：展示系统各功能模块入口
- 主内容区：用户列表表格，包含用户名、角色、状态、创建时间等字段
- 操作栏：新增用户、编辑、删除、权限设置等操作按钮

##### **4.2.3 前端实现**

**技术描述：**
前端采用Vue 3表单验证机制，通过Element Plus的验证规则确保用户输入的有效性和安全性。

**核心代码示例：**

```javascript
// 登录表单验证实现
export function useLoginForm() {
  const formRef = ref()
  const loginForm = reactive({ username: '', password: '' })

  // 验证规则配置
  const formRules = {
    username: [
      { required: true, message: '请输入用户名', trigger: 'blur' },
      { pattern: /^[a-zA-Z0-9_]{3,20}$/, message: '用户名格式不正确', trigger: 'blur' }
    ],
    password: [
      { required: true, message: '请输入密码', trigger: 'blur' },
      { min: 6, message: '密码至少6位', trigger: 'blur' }
    ]
  }

  // 登录提交处理
  const handleLogin = async () => {
    await formRef.value.validate()
    const result = await authStore.login(loginForm)
    return result.success
  }

  return { loginForm, formRules, formRef, handleLogin }
}
```

##### **4.2.4 后端实现**

**技术描述：**
后端使用jsonwebtoken生成和验证JWT令牌，实现无状态身份认证和权限控制。

**核心代码示例：**

```javascript
// JWT认证核心实现
const jwt = require('jsonwebtoken')
const { User } = require('../models')

// 生成JWT令牌
const generateToken = (user) => {
  return jwt.sign(
    { userId: user.id, username: user.username, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: '24h' }
  )
}

// 验证JWT令牌中间件
const authenticateToken = async (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1]
  if (!token) return res.status(401).json({ message: '令牌缺失' })

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET)
    req.user = await User.findByPk(decoded.userId)
    next()
  } catch (error) {
    res.status(403).json({ message: '令牌无效' })
  }
}
```


#### **4.3 商品管理模块实现**

##### **4.3.1 功能介绍**

商品管理模块是仓储管理系统的核心基础模块，提供以下主要功能：
- 商品信息管理：商品基本信息的增删改查操作
- 商品分类管理：支持多级分类体系，便于商品组织和检索
- 供应商管理：供应商信息维护，关联商品采购来源
- 商品图片管理：支持商品图片上传、预览和删除
- 商品搜索过滤：按名称、编码、分类、供应商等条件快速查找
- 商品导入导出：批量导入商品数据，支持Excel格式
- 商品状态管理：启用/禁用商品，控制商品在系统中的可用性

##### **4.3.2 网页截图说明**

**商品列表页面界面说明：**
- 页面顶部：面包屑导航"商品管理 > 商品列表"
- 搜索筛选区：商品名称搜索框、分类下拉选择器、供应商选择器、状态筛选器
- 操作按钮区：新增商品（蓝色主按钮）、批量导入、导出Excel等操作按钮
- 数据表格区：显示商品编码、名称、分类、规格、单价、库存、供应商、状态等信息
- 操作列：每行包含查看、编辑、删除等操作按钮
- 分页组件：表格底部显示分页控件和总数信息

**商品新增/编辑对话框界面说明：**
- 对话框标题：根据操作显示"新增商品"或"编辑商品"
- 基本信息区：商品名称、编码、分类选择、规格型号等输入框
- 价格库存区：进货价、销售价、安全库存、预警数量等数值输入框
- 供应商信息：供应商选择下拉框，可搜索选择
- 图片上传区：支持拖拽上传，显示上传进度和图片预览
- 描述信息：商品详细描述的富文本编辑器
- 底部按钮：取消（灰色）、确定（蓝色）操作按钮

##### **4.3.3 前端实现**

**技术描述：**
前端使用Vue 3响应式表单处理商品新建功能，通过动态验证确保商品信息的完整性和有效性。

**核心代码示例：**

```javascript
// 商品新建核心逻辑
export function useProductCreate() {
  const productForm = reactive({
    name: '', code: '', categoryId: '', supplierId: '',
    price: 0, safetyStock: 10
  })

  const formRules = {
    name: [{ required: true, message: '请输入商品名称' }],
    code: [{ required: true, message: '请输入商品编码' }],
    categoryId: [{ required: true, message: '请选择商品分类' }],
    price: [{ required: true, type: 'number', min: 0.01, message: '请输入正确价格' }]
  }

  const handleSubmit = async () => {
    await createProduct(productForm)
    ElMessage.success('商品创建成功')
    return true
  }

  return { productForm, formRules, handleSubmit }
}
```

##### **4.3.4 后端实现**

**技术描述：**
后端实现商品删除的业务限制逻辑，确保有库存或关联订单的商品不能被删除，保证数据完整性。

**核心代码示例：**

```javascript
// 商品删除限制逻辑
const deleteProduct = async (req, res) => {
  const transaction = await sequelize.transaction()
  
  try {
    const productId = req.params.id
    const product = await Product.findByPk(productId, { transaction })
    if (!product) throw new Error('商品不存在')

    // 检查库存限制
    const inventory = await Inventory.findOne({ where: { productId }, transaction })
    if (inventory?.quantity > 0) throw new Error(`商品仍有库存 ${inventory.quantity} 件`)

    // 检查订单关联
    const hasOrders = await InboundOrderItem.count({ where: { productId } }) > 0
    if (hasOrders) throw new Error('商品存在订单记录，无法删除')

    // 软删除
    await product.update({ status: 'inactive' }, { transaction })
    await transaction.commit()
    res.json({ message: '删除成功' })
  } catch (error) {
    await transaction.rollback()
    res.status(400).json({ message: error.message })
  }
}
```


#### **4.4 出入库管理模块实现**

##### **4.4.1 功能介绍**

出入库管理模块是仓储业务的核心操作模块，提供以下主要功能：
- 入库单管理：处理商品入库操作，包括采购入库、退货入库、盘盈入库等
- 出库单管理：处理商品出库操作，包括销售出库、调拨出库、盘亏出库等
- 单据审核流程：支持多级审核，确保出入库操作的合规性
- 库存实时更新：出入库操作自动更新商品库存数量
- 单据查询统计：支持按时间、类型、状态等条件查询单据
- 条码扫描支持：集成条码扫描功能，提高操作效率
- 库存流水记录：详细记录每次库存变动的来源和去向

##### **4.4.2 网页截图说明**

**出入库单据列表界面说明：**
- 页面头部：选项卡切换"入库单"和"出库单"两个标签页
- 筛选条件区：日期范围选择器、单据类型下拉框、单据状态筛选、操作人员选择
- 快捷操作区：新建入库单/出库单按钮、批量审核、导出报表等功能按钮
- 单据列表表格：显示单据编号、类型、日期、商品数量、总金额、状态、操作人等信息
- 状态标识：用不同颜色标签显示单据状态（待审核-橙色、已审核-绿色、已驳回-红色）

**新建出入库单界面说明：**
- 单据基本信息区：单据类型选择、业务日期、经办人、备注说明等基础字段
- 商品明细录入区：商品选择（支持扫码）、数量输入、单价显示、小计金额计算
- 操作功能区：添加商品行、删除商品行、批量导入商品、扫码枪接入等工具按钮
- 汇总信息显示：总数量、总金额的实时计算和显示
- 底部操作区：保存草稿、提交审核、取消操作等按钮

##### **4.4.3 后端实现**

**技术描述：**
后端实现入库单创建及审核流程，使用数据库事务确保库存变动的原子性，自动更新商品库存并记录流水信息。

**核心代码示例：**

```javascript
// 新建入库单核心逻辑
const createInboundOrder = async (req, res) => {
  const transaction = await sequelize.transaction()
  
  try {
    const { type, orderDate, items, remark } = req.body
    const orderNumber = `IN${Date.now()}`
    
    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0)
    const totalAmount = items.reduce((sum, item) => sum + item.quantity * item.unitPrice, 0)

    const order = await InboundOrder.create({
      orderNumber, type, orderDate, totalQuantity, totalAmount,
      operatorId: req.user.id, remark, status: 'pending'
    }, { transaction })

    const orderItems = items.map(item => ({
      orderId: order.id, productId: item.productId,
      quantity: item.quantity, unitPrice: item.unitPrice
    }))
    await InboundOrderItem.bulkCreate(orderItems, { transaction })
    
    await transaction.commit()
    res.status(201).json({ message: '入库单创建成功', data: order })
  } catch (error) {
    await transaction.rollback()
    res.status(500).json({ message: '创建失败' })
  }
}
```

```javascript
// 入库单审核及库存更新逻辑
const approveInboundOrder = async (req, res) => {
  const transaction = await sequelize.transaction()
  
  try {
    const order = await InboundOrder.findByPk(req.params.id, {
      include: [{ model: InboundOrderItem, as: 'items' }], transaction
    })
    if (!order || order.status !== 'pending') throw new Error('单据状态不允许审核')

    // 更新库存
    for (const item of order.items) {
      const [inventory] = await Inventory.findOrCreate({
        where: { productId: item.productId },
        defaults: { quantity: 0 }, transaction
      })
      await inventory.update({ 
        quantity: inventory.quantity + item.quantity 
      }, { transaction })
    }

    await order.update({ status: 'approved', approverId: req.user.id }, { transaction })
    await transaction.commit()
    res.json({ message: '审核成功' })
  } catch (error) {
    await transaction.rollback()
    res.status(500).json({ message: error.message })
  }
}
```

#### **4.5 库存管理模块实现**

##### **4.5.1 功能介绍**

库存管理模块是仓储系统的核心功能，负责实时跟踪和管理商品库存，提供以下主要功能：
- 实时库存查询：查看商品当前库存数量、库存状态和库存分布
- 库存流水管理：详细记录每次库存变动的原因、数量和操作人员
- 库存盘点功能：支持全盘、抽盘、循环盘点等多种盘点方式
- 库存预警机制：当库存低于安全库存时自动预警提醒
- 库存调拨管理：支持不同仓库间的库存调拨操作
- 库存分析报表：提供库存周转率、呆滞商品等分析功能

##### **4.5.2 网页截图说明**

**库存总览页面界面说明：**
- 页面顶部：库存概况卡片显示总库存数量、总价值、预警商品数量等关键指标
- 筛选搜索区：商品名称搜索、分类筛选、库存状态筛选（正常/预警/缺货）
- 操作功能区：库存盘点按钮、库存调拨按钮、导出库存报表等功能入口
- 库存列表表格：显示商品编码、名称、当前库存、安全库存、库存状态、最后更新时间
- 快捷操作列：查看库存流水、发起盘点、库存调整等操作按钮

##### **4.5.3 前端实现**

**技术描述：**
前端实现库存查询功能，支持多条件筛选、实时搜索和状态过滤，提供直观的库存状态展示。

**核心代码示例：**

```javascript
// 库存查询核心逻辑
export function useInventoryQuery() {
  const inventoryList = ref([])
  const queryForm = reactive({
    productName: '', categoryId: '', stockStatus: ''
  })

  // 查询库存列表
  const searchInventory = async () => {
    const response = await getInventoryList(queryForm)
    inventoryList.value = response.data.rows
  }

  // 获取库存状态标签
  const getStockStatusTag = (item) => {
    if (item.quantity <= 0) return { text: '缺货', type: 'danger' }
    if (item.quantity <= item.product.warningQuantity) return { text: '预警', type: 'warning' }
    return { text: '正常', type: 'success' }
  }

  return { inventoryList, queryForm, searchInventory, getStockStatusTag }
}
```

##### **4.5.4 后端实现**

**技术描述：**
后端实现今日入库数量指标的统计逻辑，通过聚合查询计算当日已审核入库单的商品总数量。

**核心代码示例：**

```javascript
// 今日入库数量统计实现
const { Op, fn, col } = require('sequelize')
const { InboundOrder, InboundOrderItem } = require('../models')

const getTodayInboundQuantity = async (req, res) => {
  try {
  // 获取当日时间范围
  const today = new Date()
  const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate())
  const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000)

  // 聚合查询今日入库数量
  const result = await InboundOrderItem.findOne({
    attributes: [
      [fn('SUM', col('quantity')), 'totalQuantity']
    ],
    include: [{
      model: InboundOrder,
      where: {
        orderDate: {
          [Op.between]: [startOfDay, endOfDay]
        },
        status: 'approved' // 只统计已审核的单据
      },
      attributes: [] // 不返回关联表字段
    }],
    raw: true
  })

    const todayInbound = parseFloat(result?.totalQuantity || 0)

    res.json({
      code: 200,
      message: '获取成功',
      data: {
        todayInbound,
        date: today.toISOString().split('T')[0]
      }
    })
    
  } catch (error) {
    console.error('统计今日入库数量失败:', error)
    res.status(500).json({
      code: 500,
      message: '统计失败'
    })
  }
}

module.exports = { getTodayInboundQuantity }
```

#### **4.6 数据看板模块实现**

##### **4.6.1 功能介绍**

数据看板模块为管理者提供仓储业务的全面数据概览和分析，主要功能包括：
- 实时业务概览：展示今日出入库数量、库存总值、预警商品等关键指标
- 出入库趋势分析：提供近期出入库业务的趋势图表和统计分析
- 商品热度排行：显示热门商品、滞销商品的排行榜和分析
- 库存分布分析：按分类、供应商等维度分析库存分布情况
- 异常预警监控：集中显示库存预警、缺货商品等异常情况

##### **4.6.2 网页截图说明**

**数据看板主页面界面说明：**
- 页面顶部：时间范围选择器，支持今日、本周、本月、自定义时间范围
- 核心指标卡片区：以卡片形式展示今日出入库数量、库存总值、预警商品数等关键KPI
- 趋势图表区：左侧显示出入库趋势折线图，右侧显示库存分布饼图
- 排行榜区域：热门商品TOP10和供应商排行，以表格或条形图展示
- 预警监控区：实时显示库存预警、异常单据等需要关注的问题

##### **4.6.3 前端实现**

**技术描述：**
前端使用ECharts图表库实现数据可视化功能，通过响应式设计展示出入库趋势和库存分布等关键业务指标。

**核心代码示例：**

```javascript
// ECharts图表实现
export function useCharts() {
  const trendChartRef = ref(null)

  const initTrendChart = async () => {
    const chartInstance = echarts.init(trendChartRef.value)
    const response = await getTrendData()
    const { dates, inboundData, outboundData } = response.data
    
    const option = {
      title: { text: '出入库趋势' },
      xAxis: { type: 'category', data: dates },
      yAxis: { type: 'value' },
      series: [
        { name: '入库', type: 'line', data: inboundData },
        { name: '出库', type: 'line', data: outboundData }
      ]
    }
    chartInstance.setOption(option)
  }

  return { trendChartRef, initTrendChart }
}
```

##### **4.6.4 后端实现**

**技术描述：**
后端实现今日入库数量指标的统计逻辑，通过聚合查询计算当日已审核入库单的商品总数量。

**核心代码示例：**

```javascript
// 今日入库数量统计
const getTodayInboundQuantity = async (req, res) => {
  try {
    const today = new Date()
    const startOfDay = new Date(today.setHours(0, 0, 0, 0))
    const endOfDay = new Date(today.setHours(23, 59, 59, 999))

    const result = await InboundOrderItem.findOne({
      attributes: [[fn('SUM', col('quantity')), 'totalQuantity']],
      include: [{
        model: InboundOrder,
        where: {
          orderDate: { [Op.between]: [startOfDay, endOfDay] },
          status: 'approved'
        }
      }]
    })

    const todayInbound = parseFloat(result?.totalQuantity || 0)
    res.json({ code: 200, data: { todayInbound } })
  } catch (error) {
    res.status(500).json({ message: '统计失败' })
  }
}
```

#### **4.7 本章小结**

本章详细介绍了基于Node.js的仓储管理系统的编码实现过程。首先明确了开发环境和前后端技术选型。接着，重点阐述了用户认证与权限管理（JWT、bcryptjs）、商品管理、出入库管理（含事务处理）、库存管理（含盘点、预警定时任务）以及数据看板（ECharts集成）等核心功能模块的具体实现思路和关键代码片段。通过这些模块的实现，系统初步具备了中小型商家仓储管理所需的核心功能。下一章将对已实现的系统进行调试与测试。